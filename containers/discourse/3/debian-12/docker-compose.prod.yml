version: '3.8'

services:
  discourse:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DISCOURSE_VERSION: "3.5.0"
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Required configuration
      DISCOURSE_HOSTNAME: ${DISCOURSE_HOSTNAME}
      DISCOURSE_SECRET_KEY_BASE: ${DISCOURSE_SECRET_KEY_BASE}
      
      # Database configuration
      DISCOURSE_DB_HOST: postgres
      DISCOURSE_DB_NAME: discourse_production
      DISCOURSE_DB_USERNAME: discourse
      DISCOURSE_DB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis configuration
      DISCOURSE_REDIS_HOST: redis
      
      # Email configuration (configure as needed)
      DISCOURSE_SMTP_ADDRESS: ${SMTP_ADDRESS}
      DISCOURSE_SMTP_PORT: ${SMTP_PORT:-587}
      DISCOURSE_SMTP_USER_NAME: ${SMTP_USERNAME}
      DISCOURSE_SMTP_PASSWORD: ${SMTP_PASSWORD}
      DISCOURSE_SMTP_ENABLE_START_TLS: "true"
      
      # Security settings
      DISCOURSE_FORCE_HTTPS: ${FORCE_HTTPS:-false}
      
      # Performance tuning
      DISCOURSE_UNICORN_WORKERS: ${UNICORN_WORKERS:-3}
      RAILS_MAX_THREADS: ${MAX_THREADS:-8}
      
      # Admin user (optional, for initial setup)
      DISCOURSE_ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      DISCOURSE_ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      DISCOURSE_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-}
    volumes:
      - discourse_uploads:/opt/discourse/public/uploads
      - discourse_backups:/opt/discourse/public/backups
      - discourse_logs:/opt/discourse/log
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /opt/discourse/tmp:noexec,nosuid,size=500m
    networks:
      - discourse_network

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: discourse_production
      POSTGRES_USER: discourse
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U discourse -d discourse_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - discourse_network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - discourse_network

  # Optional: Nginx reverse proxy for SSL termination
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - discourse_uploads:/var/www/discourse/uploads:ro
    depends_on:
      - discourse
    networks:
      - discourse_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  discourse_uploads:
    driver: local
  discourse_backups:
    driver: local
  discourse_logs:
    driver: local

networks:
  discourse_network:
    driver: bridge