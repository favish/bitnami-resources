version: '3.8'

services:
  # Redis Master
  redis-master:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      # Mode and Security
      REDIS_MODE: master
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PROTECTED_MODE: "yes"
      
      # Memory Management
      REDIS_MAXMEMORY: ${REDIS_MAXMEMORY:-1gb}
      REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      
      # Persistence Configuration
      REDIS_AOF_ENABLED: ${REDIS_AOF_ENABLED:-yes}
      REDIS_AOF_FSYNC: ${REDIS_AOF_FSYNC:-everysec}
      REDIS_SAVE: ${REDIS_SAVE:-900 1 300 10 60 10000}
      
      # Replication settings for master
      REDIS_MIN_REPLICAS_TO_WRITE: ${REDIS_MIN_REPLICAS_TO_WRITE:-0}
      REDIS_MIN_REPLICAS_MAX_LAG: ${REDIS_MIN_REPLICAS_MAX_LAG:-10}
      
      # Logging
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    volumes:
      - redis_master_data:/var/lib/redis
    healthcheck:
      test: ["/usr/local/bin/redis-health-check.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/redis:noexec,nosuid,size=10m
    networks:
      - redis_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Replica 1
  redis-replica-1:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
    restart: unless-stopped
    ports:
      - "6380:6379"
    environment:
      # Mode and replication
      REDIS_MODE: replica
      REDIS_MASTER_HOST: redis-master
      REDIS_MASTER_PORT: 6379
      REDIS_MASTER_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Replica settings
      REDIS_REPLICA_SERVE_STALE_DATA: "yes"
      REDIS_REPLICA_READ_ONLY: "yes"
      REDIS_REPLICA_PRIORITY: 100
      
      # Replication tuning
      REDIS_REPL_DISKLESS_SYNC: "no"
      REDIS_REPL_DISKLESS_SYNC_DELAY: 5
      REDIS_REPL_PING_REPLICA_PERIOD: 10
      REDIS_REPL_TIMEOUT: 60
      REDIS_REPL_BACKLOG_SIZE: "1mb"
      
      # Memory (typically smaller than master)
      REDIS_MAXMEMORY: ${REDIS_REPLICA_MAXMEMORY:-512mb}
      REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      
      # Persistence (can be different from master)
      REDIS_AOF_ENABLED: ${REDIS_REPLICA_AOF_ENABLED:-no}
      REDIS_SAVE: ""  # Disable RDB on replica
      
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    volumes:
      - redis_replica1_data:/var/lib/redis
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["/usr/local/bin/redis-health-check.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/redis:noexec,nosuid,size=10m
    networks:
      - redis_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Replica 2
  redis-replica-2:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
    restart: unless-stopped
    ports:
      - "6381:6379"
    environment:
      # Mode and replication
      REDIS_MODE: replica
      REDIS_MASTER_HOST: redis-master
      REDIS_MASTER_PORT: 6379
      REDIS_MASTER_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Replica settings
      REDIS_REPLICA_SERVE_STALE_DATA: "yes"
      REDIS_REPLICA_READ_ONLY: "yes"
      REDIS_REPLICA_PRIORITY: 90  # Lower priority than replica-1
      
      # Replication tuning
      REDIS_REPL_DISKLESS_SYNC: "no"
      REDIS_REPL_PING_REPLICA_PERIOD: 10
      REDIS_REPL_TIMEOUT: 60
      REDIS_REPL_BACKLOG_SIZE: "1mb"
      
      # Memory
      REDIS_MAXMEMORY: ${REDIS_REPLICA_MAXMEMORY:-512mb}
      REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      
      # Persistence
      REDIS_AOF_ENABLED: ${REDIS_REPLICA_AOF_ENABLED:-no}
      REDIS_SAVE: ""  # Disable RDB on replica
      
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    volumes:
      - redis_replica2_data:/var/lib/redis
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["/usr/local/bin/redis-health-check.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/redis:noexec,nosuid,size=10m
    networks:
      - redis_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Sentinel 1
  redis-sentinel-1:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
    restart: unless-stopped
    ports:
      - "26379:26379"
    environment:
      REDIS_MODE: sentinel
      REDIS_SENTINEL_PORT: 26379
      REDIS_SENTINEL_MASTER_NAME: ${REDIS_SENTINEL_MASTER_NAME:-mymaster}
      REDIS_SENTINEL_MASTER_HOST: redis-master
      REDIS_SENTINEL_MASTER_PORT: 6379
      REDIS_SENTINEL_QUORUM: ${REDIS_SENTINEL_QUORUM:-2}
      REDIS_SENTINEL_DOWN_AFTER: ${REDIS_SENTINEL_DOWN_AFTER:-30000}
      REDIS_SENTINEL_FAILOVER_TIMEOUT: ${REDIS_SENTINEL_FAILOVER_TIMEOUT:-180000}
      REDIS_SENTINEL_PARALLEL_SYNCS: 1
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - redis_network
    profiles:
      - sentinel

  # Redis Sentinel 2
  redis-sentinel-2:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
    restart: unless-stopped
    ports:
      - "26380:26379"
    environment:
      REDIS_MODE: sentinel
      REDIS_SENTINEL_PORT: 26379
      REDIS_SENTINEL_MASTER_NAME: ${REDIS_SENTINEL_MASTER_NAME:-mymaster}
      REDIS_SENTINEL_MASTER_HOST: redis-master
      REDIS_SENTINEL_MASTER_PORT: 6379
      REDIS_SENTINEL_QUORUM: ${REDIS_SENTINEL_QUORUM:-2}
      REDIS_SENTINEL_DOWN_AFTER: ${REDIS_SENTINEL_DOWN_AFTER:-30000}
      REDIS_SENTINEL_FAILOVER_TIMEOUT: ${REDIS_SENTINEL_FAILOVER_TIMEOUT:-180000}
      REDIS_SENTINEL_PARALLEL_SYNCS: 1
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - redis_network
    profiles:
      - sentinel

  # Redis Sentinel 3
  redis-sentinel-3:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
    restart: unless-stopped
    ports:
      - "26381:26379"
    environment:
      REDIS_MODE: sentinel
      REDIS_SENTINEL_PORT: 26379
      REDIS_SENTINEL_MASTER_NAME: ${REDIS_SENTINEL_MASTER_NAME:-mymaster}
      REDIS_SENTINEL_MASTER_HOST: redis-master
      REDIS_SENTINEL_MASTER_PORT: 6379
      REDIS_SENTINEL_QUORUM: ${REDIS_SENTINEL_QUORUM:-2}
      REDIS_SENTINEL_DOWN_AFTER: ${REDIS_SENTINEL_DOWN_AFTER:-30000}
      REDIS_SENTINEL_FAILOVER_TIMEOUT: ${REDIS_SENTINEL_FAILOVER_TIMEOUT:-180000}
      REDIS_SENTINEL_PARALLEL_SYNCS: 1
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - redis_network
    profiles:
      - sentinel

  # Redis Exporter for Monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis-master:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_EXPORTER_LOG_FORMAT: json
      REDIS_EXPORTER_CHECK_KEYS: "user:*,session:*"
      REDIS_EXPORTER_CHECK_SINGLE_KEYS: "db_size,uptime_in_seconds"
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - redis_network
    profiles:
      - monitoring

  # HAProxy for Load Balancing (read operations to replicas)
  redis-haproxy:
    image: haproxy:alpine
    restart: unless-stopped
    ports:
      - "6382:6379"  # Write operations (master)
      - "6383:6380"  # Read operations (replicas)
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - redis-master
      - redis-replica-1
      - redis-replica-2
    networks:
      - redis_network
    profiles:
      - loadbalancer

volumes:
  redis_master_data:
    driver: local
  redis_replica1_data:
    driver: local
  redis_replica2_data:
    driver: local

networks:
  redis_network:
    driver: bridge