version: '3.8'

services:
  redis:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      # Network Configuration
      REDIS_PORT: 6379
      REDIS_BIND: "0.0.0.0"
      
      # Security
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PROTECTED_MODE: "yes"
      
      # Memory Management
      REDIS_MAXMEMORY: ${REDIS_MAXMEMORY:-512mb}
      REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      
      # Persistence Configuration
      REDIS_AOF_ENABLED: ${REDIS_AOF_ENABLED:-yes}
      REDIS_AOF_FSYNC: ${REDIS_AOF_FSYNC:-everysec}
      REDIS_SAVE: ${REDIS_SAVE:-900 1 300 10 60 10000}
      
      # Performance Tuning
      REDIS_TCP_KEEPALIVE: 300
      REDIS_SLOWLOG_LOG_SLOWER_THAN: 10000
      REDIS_SLOWLOG_MAX_LEN: 128
      
      # Logging
      REDIS_LOGLEVEL: ${REDIS_LOGLEVEL:-notice}
    volumes:
      - redis_data:/var/lib/redis
      - redis_logs:/var/log/redis
    healthcheck:
      test: ["/usr/local/bin/redis-health-check.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/redis:noexec,nosuid,size=10m
    networks:
      - redis_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Optional: Redis Sentinel for high availability
  redis-sentinel:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        REDIS_VERSION: "7.4.0"
    restart: unless-stopped
    ports:
      - "26379:26379"
    environment:
      REDIS_MODE: sentinel
      REDIS_SENTINEL_PORT: 26379
      REDIS_SENTINEL_MASTER_NAME: ${REDIS_SENTINEL_MASTER_NAME:-mymaster}
      REDIS_SENTINEL_MASTER_HOST: redis
      REDIS_SENTINEL_MASTER_PORT: 6379
      REDIS_SENTINEL_QUORUM: ${REDIS_SENTINEL_QUORUM:-1}
      REDIS_SENTINEL_DOWN_AFTER: ${REDIS_SENTINEL_DOWN_AFTER:-30000}
      REDIS_SENTINEL_FAILOVER_TIMEOUT: ${REDIS_SENTINEL_FAILOVER_TIMEOUT:-180000}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - redis_network
    profiles:
      - sentinel

  # Optional: Redis Exporter for Prometheus monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_EXPORTER_LOG_FORMAT: json
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - redis_network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  redis_logs:
    driver: local

networks:
  redis_network:
    driver: bridge