name: Build Docker Images

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      redis: ${{ steps.changes.outputs.redis }}
      discourse: ${{ steps.changes.outputs.discourse }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            redis:
              - 'containers/redis/**'
            discourse:
              - 'containers/discourse/**'

  build-redis:
    needs: detect-changes
    if: needs.detect-changes.outputs.redis == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['8.2']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/redis
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Redis image
        uses: docker/build-push-action@v5
        with:
          context: containers/redis/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/redis/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-discourse:
    needs: detect-changes
    if: needs.detect-changes.outputs.discourse == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['3']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/discourse
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Discourse image
        uses: docker/build-push-action@v5
        with:
          context: containers/discourse/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/discourse/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    needs: [build-redis, build-discourse]
    if: always() && (needs.build-redis.result == 'success' || needs.build-discourse.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      matrix:
        image: 
          - redis
          - discourse
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.image }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'