name: Build Docker Images

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add security-events permission at workflow level
permissions:
  contents: read

env:
  REGISTRY: docker.io
  OWNER: ${{ github.repository_owner }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      redis: ${{ steps.changes.outputs.redis }}
      discourse: ${{ steps.changes.outputs.discourse }}
      os_shell: ${{ steps.changes.outputs.os_shell }}
      elasticsearch: ${{ steps.changes.outputs.elasticsearch }}
      elasticsearch_exporter: ${{ steps.changes.outputs.elasticsearch_exporter }}
      kibana: ${{ steps.changes.outputs.kibana }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            redis:
              - 'containers/redis/**'
            discourse:
              - 'containers/discourse/**'
            os_shell:
              - 'containers/os-shell/**'
            elasticsearch:
              - 'containers/elasticsearch/**'
            elasticsearch_exporter:
              - 'containers/elasticsearch-exporter/**'
            kibana:
              - 'containers/kibana/**'

  build-kibana:
    needs: detect-changes
    if: needs.detect-changes.outputs.kibana == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['9.1']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2
            [worker.containerd]
              max-parallelism = 2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-kibana
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Kibana image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/kibana/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/kibana/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_ID=${{ github.run_id }}
            GITHUB_REF=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-redis:
    needs: detect-changes
    if: needs.detect-changes.outputs.redis == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['7.4', '8.2']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-redis
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Redis image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/redis/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/redis/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_ID=${{ github.run_id }}
            GITHUB_REF=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-discourse:
    needs: detect-changes
    if: needs.detect-changes.outputs.discourse == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['3']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2
            [worker.containerd]
              max-parallelism = 2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/discourse
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Discourse image
        id: build
        uses: docker/build-push-action@v5
        env:
          # Optimize parallel builds for 8-core runner
          MAKEFLAGS: "-j8"
        with:
          context: containers/discourse/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/discourse/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_ID=${{ github.run_id }}
            GITHUB_REF=${{ github.ref_name }}
            MAKEFLAGS=-j8
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-elasticsearch:
    needs: detect-changes
    if: needs.detect-changes.outputs.elasticsearch == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['9.1']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2
            [worker.containerd]
              max-parallelism = 2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/elasticsearch
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Elasticsearch image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/elasticsearch/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/elasticsearch/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_ID=${{ github.run_id }}
            GITHUB_REF=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-elasticsearch-exporter:
    needs: detect-changes
    if: needs.detect-changes.outputs.elasticsearch_exporter == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['1']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/elasticsearch-exporter
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Elasticsearch Exporter image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/elasticsearch-exporter/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/elasticsearch-exporter/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_ID=${{ github.run_id }}
            GITHUB_REF=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-os-shell:
    needs: detect-changes
    if: needs.detect-changes.outputs.os_shell == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ['12']
        variant: ['debian-12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-os-shell
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push OS Shell image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: containers/os-shell/${{ matrix.version }}/${{ matrix.variant }}
          file: containers/os-shell/${{ matrix.version }}/${{ matrix.variant }}/Dockerfile
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_ID=${{ github.run_id }}
            GITHUB_REF=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  scan-redis:
    needs: build-redis
    if: needs.build-redis.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        version: ['7.4', '8.2']
        variant: ['debian-12']
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for Redis
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-redis:${{ matrix.version }}-${{ matrix.variant }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          timeout: '10m'
        continue-on-error: true

      - name: Trivy summary (Redis)
        if: always()
        run: |
          echo "=== Redis Vulnerability Scan Complete ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-redis:${{ matrix.version }}-${{ matrix.variant }}"
          echo "Above table shows detected vulnerabilities (if any)."

  scan-discourse:
    needs: build-discourse
    if: needs.build-discourse.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        version: ['3']
        variant: ['debian-12']
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for Discourse
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/discourse:${{ matrix.version }}-${{ matrix.variant }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          timeout: '15m'
          skip-dirs: '/opt/discourse/node_modules,/opt/discourse/vendor/bundle'
          skip-files: '*.bin,*.so,*.dylib'
        continue-on-error: true

      - name: Trivy summary (Discourse)
        if: always()
        run: |
          echo "=== Discourse Vulnerability Scan Complete ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-discourse:${{ matrix.version }}-${{ matrix.variant }}"
          echo "Above table shows detected vulnerabilities (if any)."

  scan-os-shell:
    needs: build-os-shell
    if: needs.build-os-shell.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        version: ['12']
        variant: ['debian-12']
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for OS Shell
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-os-shell:${{ matrix.version }}-${{ matrix.variant }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          timeout: '10m'
        continue-on-error: true

      - name: Trivy summary (OS Shell)
        if: always()
        run: |
          echo "=== OS Shell Vulnerability Scan Complete ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-os-shell:${{ matrix.version }}-${{ matrix.variant }}"
          echo "Above table shows detected vulnerabilities (if any)."

  scan-elasticsearch:
    needs: build-elasticsearch
    if: needs.build-elasticsearch.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        version: ['9.1']
        variant: ['debian-12']
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for Elasticsearch
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/elasticsearch:${{ matrix.version }}-${{ matrix.variant }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          timeout: '15m'
          skip-dirs: '/opt/elasticsearch/jdk,/opt/elasticsearch/modules'
          skip-files: '*.jar,*.so,*.dylib'
        continue-on-error: true

      - name: Trivy summary (Elasticsearch)
        if: always()
        run: |
          echo "=== Elasticsearch Vulnerability Scan Complete ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.OWNER }}/elasticsearch:${{ matrix.version }}-${{ matrix.variant }}"
          echo "Above table shows detected vulnerabilities (if any)."

  scan-elasticsearch-exporter:
    needs: build-elasticsearch-exporter
    if: needs.build-elasticsearch-exporter.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        version: ['1']
        variant: ['debian-12']
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for Elasticsearch Exporter
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/elasticsearch-exporter:${{ matrix.version }}-${{ matrix.variant }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          timeout: '10m'
        continue-on-error: true

      - name: Trivy summary (Elasticsearch Exporter)
        if: always()
        run: |
          echo "=== Elasticsearch Exporter Vulnerability Scan Complete ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.OWNER }}/elasticsearch-exporter:${{ matrix.version }}-${{ matrix.variant }}"
          echo "Above table shows detected vulnerabilities (if any)."

  scan-kibana:
    needs: build-kibana
    if: needs.build-kibana.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        version: ['9.1']
        variant: ['debian-12']
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner for Kibana
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-kibana:${{ matrix.version }}-${{ matrix.variant }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          timeout: '15m'
          skip-dirs: '/opt/bitnami/kibana/node,/opt/bitnami/kibana/plugins'
          skip-files: '*.so,*.dylib'
        continue-on-error: true

      - name: Trivy summary (Kibana)
        if: always()
        run: |
          echo "=== Kibana Vulnerability Scan Complete ==="
          echo "Image: ${{ env.REGISTRY }}/${{ env.OWNER }}/bitnami-kibana:${{ matrix.version }}-${{ matrix.variant }}"
          echo "Above table shows detected vulnerabilities (if any)."
