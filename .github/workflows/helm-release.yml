name: Helm Chart Release

on:
  push:
    branches: [main]
    paths:
      - 'charts/**'
  pull_request:
    branches: [main]
    paths:
      - 'charts/**'
  workflow_dispatch:

# Required for publishing to GitHub Pages and creating releases
permissions:
  contents: write  # Required for chart-releaser to create GitHub releases
  pages: write     # Required for GitHub Pages deployment
  id-token: write  # Required for GitHub Pages deployment

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  HELM_VERSION: "3.14.0"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      charts-changed: ${{ steps.list-changed.outputs.changed }}
      chart-list: ${{ steps.list-changed.outputs.chart_list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Check for chart changes
        id: list-changed
        run: |
          # Find all Chart.yaml files and extract chart directories
          charts=($(find charts -name 'Chart.yaml' -exec dirname {} \; | sort))
          
          if [[ -n "${charts[@]}" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            # Create a JSON array of chart names for matrix builds
            chart_list=$(printf '%s\n' "${charts[@]}" | jq -R -s -c 'split("\n")[:-1]')
            echo "chart_list=${chart_list}" >> $GITHUB_OUTPUT
            echo "Found charts: ${charts[*]}"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "chart_list=[]" >> $GITHUB_OUTPUT
            echo "No charts found"
          fi

  validate-charts:
    needs: detect-changes
    if: needs.detect-changes.outputs.charts-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.detect-changes.outputs.chart-list) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm Repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Resolve Chart Dependencies
        run: |
          cd ${{ matrix.chart }}
          if [ -f Chart.lock ]; then
            echo "Chart.lock found, updating dependencies..."
            helm dependency update
          elif grep -q "dependencies:" Chart.yaml; then
            echo "Dependencies found in Chart.yaml, building..."
            helm dependency build
          else
            echo "No dependencies found"
          fi

      - name: Helm Lint
        run: |
          echo "Linting chart: ${{ matrix.chart }}"
          helm lint ${{ matrix.chart }}

      - name: Helm Template Test
        run: |
          echo "Testing template generation for: ${{ matrix.chart }}"
          
          # Check if this is a library chart by looking for 'type: library' in Chart.yaml
          if grep -q "^type:\s*library" ${{ matrix.chart }}/Chart.yaml; then
            echo "⚠️  Skipping template test for library chart: ${{ matrix.chart }}"
            echo "Library charts are not installable and don't generate Kubernetes resources"
          else
            echo "✅ Running template test for application chart: ${{ matrix.chart }}"
            helm template test-release ${{ matrix.chart }} --debug --dry-run > /dev/null
            echo "Template generation successful"
          fi

  package-and-release:
    needs: [detect-changes, validate-charts]
    if: needs.detect-changes.outputs.charts-changed == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm Repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      # - name: Prepare Charts for Release
      #   run: |
      #     # Create a backup and temporary charts directory excluding library charts
      #     mkdir -p charts-backup
      #     cp -r charts/* charts-backup/ 2>/dev/null || true
          
      #     # Remove library charts from the charts directory temporarily
      #     for chart_dir in charts/*/; do
      #       if [ -f "${chart_dir}Chart.yaml" ]; then
      #         if grep -q "^type:\s*library" "${chart_dir}Chart.yaml"; then
      #           echo "⚠️  Temporarily removing library chart from packaging: $chart_dir"
      #           rm -rf "$chart_dir"
      #           continue
      #         fi
              
      #         echo "Preparing application chart: $chart_dir"
      #         cd "$chart_dir"
              
      #         # Resolve dependencies
      #         if [ -f Chart.lock ]; then
      #           echo "Updating dependencies for: $chart_dir"
      #           helm dependency update
      #         elif grep -q "dependencies:" Chart.yaml; then
      #           echo "Building dependencies for: $chart_dir"
      #           helm dependency build
      #         fi
              
      #         cd - > /dev/null
      #       fi
      #     done

      - name: Debug Charts Directory
        run: |
          echo "📁 Charts directory contents:"
          ls -la charts/
          echo ""
          echo "📋 Chart details:"
          for chart in charts/*/; do
            if [ -f "${chart}Chart.yaml" ]; then
              echo "Chart: $chart"
              echo "  Name: $(grep '^name:' ${chart}Chart.yaml | cut -d' ' -f2)"
              echo "  Version: $(grep '^version:' ${chart}Chart.yaml | cut -d' ' -f2)"
              echo "  Type: $(grep '^type:' ${chart}Chart.yaml | cut -d' ' -f2 || echo 'application')"
              echo ""
            fi
          done

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: charts
          config: .github/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_GENERATE_RELEASE_NOTES: true
          CR_SKIP_EXISTING: true

      # - name: Restore Charts Directory
      #   if: always()
      #   run: |
      #     # Restore original charts directory structure
      #     if [ -d charts-backup ]; then
      #       rm -rf charts
      #       mv charts-backup charts
      #       echo "✅ Charts directory restored"
      #     fi

      # - name: Setup Pages
      #   uses: actions/configure-pages@v4

      # - name: Build repository index
      #   run: |
      #     # Create a temporary directory for the site
      #     mkdir -p public
          
      #     # Copy the chart repository index
      #     if [ -f .cr-index/index.yaml ]; then
      #       cp .cr-index/index.yaml public/
      #     fi
          
      #     # Create a simple HTML page for the repository
      #     cat > public/index.html << 'EOF'
      #     <!DOCTYPE html>
      #     <html>
      #     <head>
      #         <title>Favish Bitnami Helm Charts</title>
      #         <meta charset="utf-8">
      #         <meta name="viewport" content="width=device-width, initial-scale=1">
      #         <style>
      #             body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 40px; }
      #             .container { max-width: 800px; margin: 0 auto; }
      #             .header { text-align: center; margin-bottom: 40px; }
      #             .usage { background: #f6f8fa; padding: 20px; border-radius: 6px; margin: 20px 0; }
      #             .charts { margin: 20px 0; }
      #             .chart { border: 1px solid #e1e4e8; border-radius: 6px; padding: 16px; margin: 10px 0; }
      #             code { background: #f6f8fa; padding: 2px 4px; border-radius: 3px; font-family: monospace; }
      #             pre { background: #f6f8fa; padding: 16px; border-radius: 6px; overflow-x: auto; }
      #         </style>
      #     </head>
      #     <body>
      #         <div class="container">
      #             <div class="header">
      #                 <h1>🚢 Favish Bitnami Helm Charts</h1>
      #                 <p>Production-ready Helm charts for Bitnami applications</p>
      #             </div>
                  
      #             <div class="usage">
      #                 <h2>📦 Usage</h2>
      #                 <p>Add this Helm repository to your local Helm client:</p>
      #                 <pre><code>helm repo add favish-bitnami https://favish.github.io/bitnami-resources
      #     helm repo update</code></pre>
      #             </div>
                  
      #             <div class="charts">
      #                 <h2>📋 Available Charts</h2>
                      
      #                 <div class="chart">
      #                     <h3>🗣️ Discourse</h3>
      #                     <p>A modern discussion platform with built-in moderation and spam protection.</p>
      #                     <pre><code>helm install my-discourse favish-bitnami/discourse</code></pre>
      #                 </div>
                      
      #                 <div class="chart">
      #                     <h3>🔴 Redis</h3>
      #                     <p>In-memory data structure store, used as a database, cache, and message broker.</p>
      #                     <pre><code>helm install my-redis favish-bitnami/redis</code></pre>
      #                 </div>
      #             </div>
                  
      #             <div class="usage">
      #                 <h2>🔗 Links</h2>
      #                 <ul>
      #                     <li><a href="https://github.com/favish/bitnami-resources">📁 Source Code</a></li>
      #                     <li><a href="index.yaml">📄 Repository Index</a></li>
      #                     <li><a href="https://github.com/favish/bitnami-resources/releases">🏷️ Chart Releases</a></li>
      #                 </ul>
      #             </div>
      #         </div>
      #     </body>
      #     </html>
      #     EOF

      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: ./public

      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4

  notify:
    needs: [detect-changes, validate-charts, package-and-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "## 📊 Helm Chart Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.detect-changes.outputs.charts-changed }}" == "true" ]]; then
            echo "✅ **Charts detected and processed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Charts found:**" >> $GITHUB_STEP_SUMMARY
            
            # Parse the JSON array and display charts
            charts='${{ needs.detect-changes.outputs.chart-list }}'
            echo "${charts}" | jq -r '.[]' | while read chart; do
              echo "- \`${chart}\`" >> $GITHUB_STEP_SUMMARY
            done
            
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Published to:** https://favish.github.io/bitnami-resources" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **No chart changes detected**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Job Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate-charts.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release: ${{ needs.package-and-release.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
