name: Advanced Build Matrix

on:
  # push:
  #   branches: [ main, dev ]
  # pull_request:
  #   branches: [ main ]
  # schedule:
  #   # Weekly rebuild on Sundays at 2 AM UTC
  #   - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build all images'
        required: false
        default: false
        type: boolean
      build_platforms:
        description: 'Build platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate build matrix
        id: generate
        run: |
          # Initialize empty array for matrix entries
          matrix_entries=()
          
          # Find all Dockerfiles and generate matrix entries
          while IFS= read -r dockerfile; do
            # Extract path components
            container_path=$(dirname "$dockerfile")
            container_name=$(echo "$container_path" | cut -d'/' -f2)
            version=$(echo "$container_path" | cut -d'/' -f3)
            variant=$(echo "$container_path" | cut -d'/' -f4)
            
            # Check if this path has changes (or force build)
            if [ "${{ github.event.inputs.force_build }}" = "true" ] || \
               [ "${{ github.event_name }}" = "schedule" ] || \
               git diff --name-only ${{ github.event.before || 'HEAD~1' }} HEAD | grep -q "^${container_path}"; then
              
              # Add entry to array (single line JSON to avoid newline issues)
              entry="{\"container\":\"${container_name}\",\"version\":\"${version}\",\"variant\":\"${variant}\",\"path\":\"${container_path}\",\"dockerfile\":\"${dockerfile}\",\"changed\":true}"
              matrix_entries+=("$entry")
            fi
          done < <(find containers -name "Dockerfile" -type f)
          
          # Build final JSON matrix
          if [ ${#matrix_entries[@]} -eq 0 ]; then
            matrix='{"include": []}'
          else
            # Join array elements with commas
            IFS=','
            matrix_content="${matrix_entries[*]}"
            matrix="{\"include\": [${matrix_content}]}"
          fi
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix:"
          echo "$matrix" | jq .

  build-images:
    needs: generate-matrix
    if: needs.generate-matrix.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Docker Hub is the default registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Build Info
        id: build-info
        run: |
          BUILD_NUMBER="${{ github.run_number }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BUILD_ID="pr-${{ github.event.number }}-${BUILD_NUMBER}"
          else
            BUILD_ID="${{ github.ref_name }}-${BUILD_NUMBER}"
          fi
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "Build Number: ${BUILD_NUMBER}"
          echo "Build ID: ${BUILD_ID}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-{{sha}}
            type=raw,value=${{ matrix.version }}-${{ matrix.variant }}-r${{ github.run_number }}
            type=raw,value=${{ steps.build-info.outputs.build_id }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern=weekly-{{date 'YYYYMMDD'}}

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        timeout-minutes: ${{ matrix.container == 'discourse' && 60 || 30 }}
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platforms }}
          build-args: |
            BUILD_NUMBER=${{ steps.build-info.outputs.build_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        timeout-minutes: ${{ matrix.container == 'discourse' && 30 || 15 }}
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.container }}:${{ steps.build-info.outputs.build_id }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.container }}-${{ steps.build-info.outputs.build_id }}.sarif'
          timeout: ${{ matrix.container == 'discourse' && '30m' || '15m' }}
          skip-dirs: ${{ matrix.container == 'discourse' && '/opt/discourse/node_modules,/opt/discourse/vendor/bundle' || '' }}
          skip-files: "*.bin,*.so,*.dylib"
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.container }}-${{ steps.build-info.outputs.build_id }}.sarif'
        continue-on-error: true

  notify:
    needs: [generate-matrix, build-images]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-images.result }}" = "success" ]; then
            echo "✅ All images built successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" = "failure" ]; then
            echo "❌ Some image builds failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ No images needed to be built" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: ${{ env.REGISTRY }}/${{ env.OWNER }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
